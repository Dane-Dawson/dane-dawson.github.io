{"version":3,"sources":["images/Rocket-Dane.png","images/pika-construction.gif","components/terminal/Terminal.js","App.js","reportWebVitals.js","index.js"],"names":["Terminal","props","useState","terminalDisplay","setTerminalDisplay","className","handleTerminalDisplay","terminalInput","onChange","event","setTerminalInput","target","value","command","toLowerCase","includes","handleChange","App","pets","petPikachu","src","rocketDane","alt","piConstruction","onClick","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAAe,G,MAAA,IAA0B,yCCA1B,MAA0B,8C,eC2D1BA,MAxDf,SAAkBC,GACd,MAA8CC,mBAAU,IAAxD,mBAAOC,EAAP,KAAwBC,EAAxB,KA+BF,OACE,sBAAKC,UAAU,eAAf,UACA,sDACA,gEACA,sDACA,6CACA,mEACA,uEACA,uBACA,4BA5B8B,WAC1B,OAAQF,GACJ,IAAK,OACD,MAAO,4EACX,IAAK,QACD,MAAO,GACX,IAAK,WACD,MAAO,iGACX,IAAK,YACD,OAAO,gCACH,gEACA,gEACA,mDACA,0DACA,uEAcZG,KACJ,sBAAKD,UAAU,qBAAf,UACA,sBAAMA,UAAU,qBAAhB,8CACA,sBAAMA,UAAU,6BAAhB,SAA8CJ,EAAMM,cAAgB,KAAO,oCAC3E,uBACAF,UAAU,iBACVG,SAAU,SAACC,GAAD,OA5CW,SAACA,GAClBR,EAAMS,iBAAiBD,EAAME,OAAOC,OACpC,IACIC,EAAUJ,EAAME,OAAOC,MAAME,cADd,CAAC,OAAQ,WAAY,QAAS,aAEhCC,SAASF,KACtBT,EAAmBS,GACnBZ,EAAMS,iBAAiB,KAsCZM,CAAaP,IAChCG,MAAOX,EAAMM,uBChBFU,MA3Bf,WACE,MAA2Bf,mBAAU,GAArC,mBAAOgB,EAAP,KAAaC,EAAb,KACA,EAA0CjB,mBAAU,IAApD,mBAAOK,EAAP,KAAsBG,EAAtB,KAEA,OACE,qBAAKL,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKe,IAAKC,EAAYhB,UAAU,cAAciB,IAAI,SAClD,wDAGA,4GAGA,qBAAKF,IAAKG,EACVC,QAAS,kBAAIL,GAAW,SAAAM,GAAI,OAAIA,EAAO,MACvCpB,UAAU,oBACViB,IAAI,uBACF,8BACCJ,EADD,+BAGF,cAAC,EAAD,CAAUR,iBAAkBA,EAAkBH,cAAeA,UCjBtDmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9fd8c90b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Rocket-Dane.3d2ba147.png\";","export default __webpack_public_path__ + \"static/media/pika-construction.af5a0265.gif\";","import './Terminal.css';\nimport React, { useState } from 'react';\n\nfunction Terminal(props) {\n    const [terminalDisplay, setTerminalDisplay] = useState( '')\n\n    const handleChange = (event) => {\n        props.setTerminalInput(event.target.value)\n        let commandArray = [\"help\", \"commands\", \"clear\", \"limmerick\"]\n        let command = event.target.value.toLowerCase()\n        if (commandArray.includes(command)){\n            setTerminalDisplay(command)\n            props.setTerminalInput('')\n        }\n    }\n\n    const handleTerminalDisplay = () => {\n        switch (terminalDisplay){\n            case \"help\":\n                return \"I mean...I wish I could, I need some myself! Have you tried using Google?\";\n            case \"clear\":\n                return \"\";\n            case \"commands\":\n                return \"Seriously? Just look up like...2 lines. I know devs don't read documentation, but come on now.\";\n            case \"limmerick\":\n                return(<div>\n                    <p>There once was a coder who came</p>\n                    <p>to a site engineered by a Dane.</p>\n                    <p>His work is unique</p>\n                    <p>and he's up for critique,</p>\n                    <p>But be gentle to cause him no pain</p>\n                </div>)\n        }\n    }\n\n  return (\n    <div className=\"terminal-div\">\n    <p>webpack: Compiling...</p>\n    <p>webpack: Compiled successfully.</p>\n    <p>Hash: 8675309-4eva&42</p>\n    <p>Time: 1337ms</p>\n    <p>Enter commands below to explore...</p>\n    <p>help || clear || commands || limmerick</p>\n    <br/>\n    <p>{handleTerminalDisplay()}</p>\n    <div className=\"terminal-input-div\">\n    <span className=\"terminal-file-path\"> dane@Danes-Site dane-the-site %</span>\n    <span className=\"terminal-input-placeholder\">{props.terminalInput ? null : \"Click here to type a command...\"}</span>\n    <input \n    className=\"terminal-input\"\n    onChange={(event)=>handleChange(event)} \n    value={props.terminalInput}\n    />\n    </div>\n    \n    </div>\n  );\n}\n\nexport default Terminal;","import React, { useState } from 'react';\nimport './App.css';\n\nimport rocketDane from './images/Rocket-Dane.png'\nimport piConstruction from './images/pika-construction.gif'\nimport Terminal from './components/terminal/Terminal'\n\n\nfunction App() {\n  const [pets, petPikachu] = useState( 0 );\n  const [terminalInput, setTerminalInput] = useState( '')\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={rocketDane} className=\"rocket-dane\" alt=\"logo\" />\n        <p>\n          Welcome to Dane's site!\n        </p>\n        <p>\n          It's currently under construction. Click to pet the Pikachu while you wait.\n        </p>\n        <img src={piConstruction} \n        onClick={()=>petPikachu(prev => prev + 1)}\n        className=\"construction-pika\" \n        alt=\"under construction\" />\n          <p>\n          {pets} Pikachu pets. Well done.\n          </p>\n        <Terminal setTerminalInput={setTerminalInput} terminalInput={terminalInput}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}