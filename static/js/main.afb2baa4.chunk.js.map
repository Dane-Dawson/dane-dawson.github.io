{"version":3,"sources":["images/Rocket-Dane.png","images/pika-construction.gif","components/terminal/TerminalDisplayReadouts.js","components/terminal/Terminal.js","App.js","reportWebVitals.js","index.js"],"names":["handleTerminalDisplay","terminalDisplay","help","commands","limmerick","className","terminalInput","props","handleChange","onChange","event","value","Terminal","useState","setTerminalDisplay","setTerminalInput","target","command","toLowerCase","includes","App","showTerminal","toggleTerminal","onClick","prev","renderTerminal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAAe,ICAA,I,YCEFA,EAAwB,SAACC,GAClC,OAAQA,GACN,IAAK,QACH,MAAO,GACT,IAAK,OACH,OAAOC,IACT,IAAK,WACH,OAAOC,IACT,IAAK,YACH,OAAOC,MAOFD,EAAW,WACpB,OAAQ,gCACJ,mBAAGE,UAAU,8BAAb,qDACA,mBAAGA,UAAU,8BAAb,wEAKKH,EAAO,WAChB,OAAQ,gCACJ,mBAAGG,UAAU,mBAAb,0DACA,mBAAGA,UAAU,0BAAb,8CAIKD,EAAY,WACrB,OAAQ,gCACQ,mBAAGC,UAAU,+BAAb,6CACA,mBAAGA,UAAU,+BAAb,6CACA,mBAAGA,UAAU,+BAAb,gCACA,mBAAGA,UAAU,+BAAb,uCACA,mBAAGA,UAAU,+BAAb,iDACA,uBACA,uBACA,mBAAGA,UAAU,+BAAb,4BA2BPC,EAAgB,SAACC,EAAOC,GACjC,OAAQ,sBAAKH,UAAU,qBAAf,UACR,sBAAMA,UAAU,qBAAhB,6CAGA,sBAAMA,UAAU,6BAAhB,SACGE,EAAMD,cAAgB,KAAO,oCAEhC,uBACED,UAAU,iBACVI,SAAU,SAACC,GAAD,OAAWF,EAAaE,IAClCC,MAAOJ,EAAMD,oBCpDJM,MAvBf,SAAkBL,GAChB,MAA8CM,mBAAS,IAAvD,mBAAOZ,EAAP,KAAwBa,EAAxB,KAYA,OACE,sBAAKT,UAAU,eAAf,UDgCQ,iCACV,mBAAGA,UAAU,oBAAb,mCACE,mBAAGA,UAAU,mBAAb,6CACA,mBAAGA,UAAU,gBAAb,mCACA,mBAAGA,UAAU,gBAAb,0BACA,mBAAGA,UAAU,0BAAb,gDAGA,mBAAGA,UAAU,oBAAb,uDCtCE,uBACCL,EAAsBC,GACtBK,EAAcC,GAfE,SAACG,GACpBH,EAAMQ,iBAAiBL,EAAMM,OAAOL,OACpC,IACIM,EAAUP,EAAMM,OAAOL,MAAMO,cADd,CAAC,OAAQ,WAAY,QAAS,aAEhCC,SAASF,KACxBH,EAAmBG,GACnBV,EAAMQ,iBAAiB,YC8BdK,MApCf,WACE,MAA2BP,mBAAU,GAArC,mBACA,GADA,UAC0CA,mBAAS,KAAnD,mBAAOP,EAAP,KAAsBS,EAAtB,KACA,EAAuCF,oBAAS,GAAhD,mBAAOQ,EAAP,KAAqBC,EAArB,KAQA,OACE,qBAAKjB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UAEE,6GAGA,wBAAQA,UAAU,gBAAgBkB,QAAS,kBAAID,GAAe,SAAAE,GAAI,OAAGA,MAArE,SAA6EH,EAAe,iBAAmB,kBAC/G,uBAdiB,WACrB,GAAIA,EACF,OAAO,cAAC,EAAD,CAAUN,iBAAkBA,EAAkBT,cAAeA,IAajEmB,SChBMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.afb2baa4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Rocket-Dane.3d2ba147.png\";","export default __webpack_public_path__ + \"static/media/pika-construction.af5a0265.gif\";","// Input for handling commands, return is associated to the const created below associated with the recieved terminalDisplay\n\nexport const handleTerminalDisplay = (terminalDisplay) => {\n    switch (terminalDisplay) {\n      case \"clear\":\n        return \"\";\n      case \"help\":\n        return help();\n      case \"commands\":\n        return commands();\n      case \"limmerick\":\n        return limmerick();\n    }\n  };\n\n\n//  !!   commands returns for the terminal\n\nexport const commands = () => {\n    return (<div>\n        <p className=\"terminal-display commands-1\">Seriously? Just look up like...2 lines.</p>\n        <p className=\"terminal-display commands-2\">I know devs don't read documentation, but come on now.</p>\n\n        </div>)\n}\n\nexport const help = () => {\n    return (<div>\n        <p className=\"terminal-display\">I mean...I wish I could, I need some myself!</p>\n        <p className=\"terminal-display help-1\">Have you tried using Google?</p>\n        </div>)\n}\n\nexport const limmerick = () => {\n    return (<div>\n                    <p className=\"terminal-display limmerick-1\">There once was a coder who came</p>\n                    <p className=\"terminal-display limmerick-2\">to a site engineered by a Dane.</p>\n                    <p className=\"terminal-display limmerick-3\">His work is unique</p>\n                    <p className=\"terminal-display limmerick-4\">and he's up for critique,</p>\n                    <p className=\"terminal-display limmerick-5\">but be gentle to cause him no pain.</p>\n                    <br/>\n                    <br/>\n                    <p className=\"terminal-display limmerick-6\">...please?</p>\n        </div>\n    )\n}\n\n\n// Initial loading screen for the terminal\n\nexport const terminalLoading = () => {\n    return (<span>\n  <p className=\"webpack-compiling\">webpack: Compiling...</p>\n    <p className=\"webpack-compiled\">webpack: Compiled successfully.</p>\n    <p className=\"terminal-hash\">Hash: 8675309-4eva&42</p>\n    <p className=\"terminal-time\">Time: 1337ms</p>\n    <p className=\"terminal-enter-commands\">\n      Enter commands below to explore...\n    </p>\n    <p className=\"terminal-commands\">\n      help || clear || commands || limmerick\n    </p>\n    </span>\n    )\n}\n\n\n//  Bottom row, terminal location and input\n\nexport const terminalInput = (props, handleChange) => {\n    return (<div className=\"terminal-input-div\">\n    <span className=\"terminal-file-path\">\n      dane@Danes-Site dane-the-site %\n    </span>\n    <span className=\"terminal-input-placeholder\">\n      {props.terminalInput ? null : \"Click here to type a command...\"}\n    </span>\n    <input\n      className=\"terminal-input\"\n      onChange={(event) => handleChange(event)}\n      value={props.terminalInput}\n    />\n  </div>)\n}","import \"./Terminal.css\";\nimport React, { useState } from \"react\";\n\nimport { handleTerminalDisplay, commands, help, limmerick, terminalLoading, terminalInput } from \"./TerminalDisplayReadouts\";\n\nfunction Terminal(props) {\n  const [terminalDisplay, setTerminalDisplay] = useState(\"\");\n\n  const handleChange = (event) => {\n    props.setTerminalInput(event.target.value);\n    let commandArray = [\"help\", \"commands\", \"clear\", \"limmerick\"];\n    let command = event.target.value.toLowerCase();\n    if (commandArray.includes(command)) {\n      setTerminalDisplay(command);\n      props.setTerminalInput(\"\");\n    }\n  };\n\n  return (\n    <div className=\"terminal-div\">\n      {terminalLoading()}\n      <br />\n      {handleTerminalDisplay(terminalDisplay)}\n      {terminalInput(props, handleChange)}\n    </div>\n  );\n}\n\nexport default Terminal;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport rocketDane from './images/Rocket-Dane.png'\nimport piConstruction from './images/pika-construction.gif'\nimport Terminal from './components/terminal/Terminal'\n\n\nfunction App() {\n  const [pets, petPikachu] = useState( 0 );\n  const [terminalInput, setTerminalInput] = useState('')\n  const [showTerminal, toggleTerminal] = useState(false)\n\n  const renderTerminal = () => {\n    if (showTerminal){\n      return <Terminal setTerminalInput={setTerminalInput} terminalInput={terminalInput}/>\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={rocketDane} className=\"rocket-dane\" alt=\"logo\" /> */}\n        <p>\n          Welcome to Dane's site! It's under construction, but enjoy what's published!\n        </p>\n        <button className=\"show-terminal\" onClick={()=>toggleTerminal(prev=>!prev)}>{showTerminal ? \"Close Terminal\" : \"Open Terminal\"}</button>\n        <br/>\n        {renderTerminal()}\n        {/* <p>\n          It's currently under construction. Click to pet the Pikachu while you wait.\n        </p>\n        <img src={piConstruction} \n        onClick={()=>petPikachu(prev => prev + 1)}\n        className=\"construction-pika\" \n        alt=\"under construction\" />\n          <p>\n          {pets} Pikachu pets. Well done.\n          </p> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}